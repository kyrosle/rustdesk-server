syntax = "proto3";
package hbb;

message RegisterPeer {
  string id = 1;
  int32 serial = 2;
}

enum ConnType {
  DEFAULT_CONN = 0;
  FILE_TRANSFER = 1;
  PORT_FORWARD = 2;
  RDP = 3; // Remote Desktop Protocol
}

message RegisterPeerResponse { bool request_pk = 2; }

message PunchHoleRequest {
  string id = 1;
  NatType nat_type = 2;
  string licence_key = 3; // 许可证密钥
  ConnType conn_type = 4;
  string token = 5; // 身份验证/授权令牌
}

// 打洞
message PunchHole {
  bytes socket_addr = 1;
  string relay_server = 2; // 中继服务器
  NatType nat_type = 3;
}

message TestNatRequest { int32 serial = 1; }

// per my test, uint/int has no difference in encoding, int not good for
// negative, use sint for negative
message TestNatResponse {
  int32 port = 1;
  ConfigUpdate cu = 2; // for mobile
}

enum NatType {
  UNKNOWN_NAT = 0;
  ASYMMETRIC = 1; // 非对称
  SYMMETRIC = 2;  // 对称
}

message PunchHoleSent {
  bytes socket_addr = 1;
  string id = 2;
  string relay_server = 3;
  NatType nat_type = 4;
  string version = 5;
}

message RegisterPk {
  string id = 1;
  bytes uuid = 2;
  bytes pk = 3; // public key
  string old_id = 4;
}

message RegisterPkResponse {
  enum Result {
    OK = 0;                // 注册成功
    UUID_MISMATCH = 2;     // 与服务器上的 uuid 不匹配
    ID_EXISTS = 3;         // 已有相同id
    TOO_FREQUENT = 4;      // 注册请求过于频繁
    INVALID_ID_FORMAT = 5; // 非法id格式
    NOT_SUPPORT = 6;       // 服务器不支持注册
    SERVER_ERROR = 7;      // 服务器发生错误
  }
  Result result = 1;
}

message PunchHoleResponse {
  bytes socket_addr = 1; // punchhole 成功后 远程的socket
  bytes pk = 2;          // 用于与 punchhole相关操作的 public key
  enum Failure {
    ID_NOT_EXIST = 0;     // 无法找到id
    OFFLINE = 2;          // 目标不在线
    LICENSE_MISMATCH = 3; // 许可证不匹配
    LICENSE_OVERUSE = 4;  // 许可证过度使用
  }
  Failure failure = 3; // punchhole 中 中继节点服务器
  string relay_server = 4;
  oneof union {
    NatType nat_type = 5;
    bool is_local = 6;
  } string other_failure = 7;
}

message ConfigUpdate {
  int32 serial = 1;
  repeated string rendezvous_servers = 2;
}

message RequestRelay {
  string id = 1;
  string uuid = 2;
  bytes socket_addr = 3;
  string relay_server = 4;
  bool secure = 5;
  string licence_key = 6;
  ConnType conn_type = 7;
  string token = 8;
}

message RelayResponse {
  bytes socket_addr = 1;
  string uuid = 2;
  string relay_server = 3;
  oneof union {
    string id = 4;
    bytes pk = 5;
  } string refuse_reason = 6;
  string version = 7;
}

message SoftwareUpdate { string url = 1; }

// if in same intranet, punch hole won't work both for udp and tcp,
// even some router has below connection error if we connect itself,
//  { kind: Other, error: "could not resolve to any address" },
// so we request local address to connect.
message FetchLocalAddr {
  bytes socket_addr = 1;
  string relay_server = 2;
}

message LocalAddr {
  bytes socket_addr = 1;
  bytes local_addr = 2;
  string relay_server = 3;
  string id = 4;
  string version = 5;
}

message PeerDiscovery {
  string cmd = 1;
  string mac = 2;
  string id = 3;
  string username = 4;
  string hostname = 5;
  string platform = 6;
  string misc = 7;
}

message OnlineRequest {
  string id = 1;
  repeated string peers = 2;
}

message OnlineResponse { bytes states = 1; }

message RendezvousMessage {
  oneof union {
    RegisterPeer register_peer = 6;                  // 注册对等节点
    RegisterPeerResponse register_peer_response = 7; // 注册对等节点 响应
    PunchHoleRequest punch_hole_request = 8;         // punchhole 请求
    PunchHole punch_hole = 9;                        // punchole操作信息
    PunchHoleSent punch_hole_sent = 10;           // punchole操作 发送信息
    PunchHoleResponse punch_hole_response = 11;   // punchole操作 响应
    FetchLocalAddr fetch_local_addr = 12;         // 获取本地地址
    LocalAddr local_addr = 13;                    // 本地地址
    ConfigUpdate configure_update = 14;           // 配置更新消息
    RegisterPk register_pk = 15;                  // 注册公钥
    RegisterPkResponse register_pk_response = 16; // 注册公钥 相应
    SoftwareUpdate software_update = 17;          // 软件更新消息
    RequestRelay request_relay = 18;              // 请求中继
    RelayResponse relay_response = 19;            // 中继响应
    TestNatRequest test_nat_request = 20;         // 测试 nat 请求
    TestNatResponse test_nat_response = 21;       // 测试 nat 响应
    PeerDiscovery peer_discovery = 22;            // 对等节点发现消息
    OnlineRequest online_request = 23;            // 在线请求
    OnlineResponse online_response = 24;          // 在线请求响应
  }
}
